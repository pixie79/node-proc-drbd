"use strict";
var drbdProc = require('../lib/drbdProc');
var drbdConfig = require('../lib/drbdConfig');
var timestamp = Date.now();

function resultFor(drbd, ref) {
  var result, refsplit = ref.split('.'), refLength = refsplit.length - 1, i = 0;
  while (i < refsplit.length) {
    if (drbd[refsplit[i]]){
      drbd = drbd[refsplit[i]];
      if (refsplit[i] === refsplit[refLength]) {
        result = refsplit.join().replace(/,/gm, ('.')) + ": " + drbd;
        result = result.concat(" " + timestamp);
      }
    } else {
      result = refsplit.join().replace(/,/gm, ('.')) + ": 0";
      result = result.concat(" " + timestamp);
    }
    i = i + 1;
  }
  return (false, result);
}

function outputMetrics(drbd, disks) {
  var output = [];
  var metrics = ['performance.ns', 'performance.nr', 'performance.dw', 'performance.dr', 'performance.al', 'performance.bm', 'performance.lo', 'performance.pe', 'performance.ua', 'performance.ap', 'performance.ep', 'performance.oos', 'resync.used', 'resync.hits', 'resync.misses', 'resync.starving', 'resync.locked', 'resync.changed', 'act_log.used', 'act_log.hits', 'act_log.misses', 'act_log.starving', 'act_log.locked', 'act_log.changed']
  disks.forEach(function(disk){
    metrics.forEach(function(item){
      var itemstr = disk;
      itemstr = itemstr.concat("." + item);
      output.push(resultFor(drbd, itemstr));
      });
  });
  return output;
}

function getData(callback) {
  drbdConfig.doit(function (cb) {
    var drbdconfig = cb;
    var disks = [];
    disks = drbdconfig[0].split(',');
    drbdProc.doit(function (cb) {
      var drbd = cb;
      callback(outputMetrics(drbd, disks));
    });
  });
}

exports.doit = function (callback) {
  getData(callback);
};
