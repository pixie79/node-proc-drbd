"use strict";
var drbdProc = require('../lib/drbdProc');
var timestamp = Date.now();

function resultFor(drbd, ref) {
  var result, refsplit = ref.split('.'), refLength = refsplit.length - 1, i = 0;
  while (i < refsplit.length) {
    drbd = drbd[refsplit[i]];
    if (refsplit[i] === refsplit[refLength]) {
      result = refsplit.join().replace(/,/gm, ('.')) + ": " + drbd;
      result = result.concat(" " + timestamp);
    }
    i = i + 1;
  }
  return (false, result);
}

function outputMetrics(drbd) {
  var output = [];
  output.push(resultFor(drbd, "drbd0.performance.ns"));
  output.push(resultFor(drbd, "drbd0.performance.ns"));
  output.push(resultFor(drbd, "drbd0.performance.nr"));
  output.push(resultFor(drbd, "drbd0.performance.dw"));
  output.push(resultFor(drbd, "drbd0.performance.dr"));
  output.push(resultFor(drbd, "drbd0.performance.al"));
  output.push(resultFor(drbd, "drbd0.performance.bm"));
  output.push(resultFor(drbd, "drbd0.performance.lo"));
  output.push(resultFor(drbd, "drbd0.performance.pe"));
  output.push(resultFor(drbd, "drbd0.performance.ua"));
  output.push(resultFor(drbd, "drbd0.performance.ap"));
  output.push(resultFor(drbd, "drbd0.performance.ep"));
  output.push(resultFor(drbd, "drbd0.performance.oos"));
  return output;
}

function getData(callback) {
  drbdProc.doit(function (cb) {
    var drbd = cb;
    callback(outputMetrics(drbd, callback));
  });
}

exports.doit = function (callback) {
  getData(callback);
};
