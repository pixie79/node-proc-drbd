var fs = require('fs');
var async = require('async');

exports.doit = function (callback) {
  readData(callback);
}

function readData(callback) {
  var data = "";
  fs.readFile('/proc/drbd', encoding='utf8', function(err, data) {
    if (err) throw err;
    async.parallel([ 
      function(cb){setTimeout(parseDataVersion(err, data, cb),10);
      },
      function(cb){setTimeout(parseData(err, data, cb),10);
       }
      ],
      function(err, results){
        callback(results);
        console.log(results);
      }
    );
  });
}

function parseData(err,data, cb) {
  if (err) throw err;
  data = data.replace(/(.+\n){1,2}/, '');
  data = data.replace(/(\r\n|\n|\r)/gm," ");
  data = data.replace(/\s+/g," ");
  var dataA = data.split(/(\d+:\scs:)/);
  var dataB = [];
  var i = 1;
  while (i < dataA.length) {
    var tmp = "";
    tmp = dataA[i].concat(dataA[i + 1]);
    tmp = tmp.replace(/([rs])([a-])([p-])([u-])([abdn-])([s-])/,'io_suspension: $1, serial_resynchronization: $2, peer_initiated_sync: $3, locally_initiated_sync: $4, locally_blocked_io: $5, activity_log_update_suspension: $6');
    tmp = tmp.replace(/-/gm,'NULL');
    tmp = tmp.replace(/(\b)/gm,'\"');
    tmp = tmp.replace(/(\"\/\")/gm,'\/');
    tmp = tmp.replace(/\"cs/,'\{ \"state\"\: \{\"cs');
    tmp = tmp.replace(/\s\"ro/,'\, \"ro');
    tmp = tmp.replace(/\s\"ds/,'\, \"ds');
    tmp = tmp.replace(/\"ns/,'\}, \"performance\"\: \{\"ns');
    tmp = tmp.replace(/\s\"nr/,'\, \"nr');
    tmp = tmp.replace(/\s\"dw/,'\, \"dw');
    tmp = tmp.replace(/\s\"dr/,'\, \"dr');
    tmp = tmp.replace(/\s\"al/,'\, \"al');
    tmp = tmp.replace(/\s\"bm/,'\, \"bm');
    tmp = tmp.replace(/\s\"lo\"/,'\, \"lo\"');
    tmp = tmp.replace(/\s\"pe\"/,'\, \"pe\"');
    tmp = tmp.replace(/\s\"ua/,'\, \"ua');
    tmp = tmp.replace(/\s\"ap/,'\, \"ap');
    tmp = tmp.replace(/\s\"ep/,'\, \"ep');
    tmp = tmp.replace(/\s\"wo/,'\, \"wo');
    tmp = tmp.replace(/\s\"oos\"/,'\, \"oos\"');
    tmp = tmp.replace(/\"resync\"\:/,'\}, \"resync\"\: \{');
    tmp = tmp.replace(/\s\"hits/gm,'\, \"hits');
    tmp = tmp.replace(/\s\"misses\"/gm,'\, \"misses\"');
    tmp = tmp.replace(/\s\"starving/gm,'\, \"starving');
    tmp = tmp.replace(/\s\"locked/gm,'\, \"locked');
    tmp = tmp.replace(/\s\"changed/gm,'\, \"changed');
    tmp = tmp.replace(/\"act\_log\"\:/,'\}, \"act\_log\"\: \{');
    tmp = tmp.replace(/^\"/,'\{\"drbd');
    tmp = tmp.replace(/$/,'\}\}\}');
    tmp = tmp.replace(/\"([ABC]\")/,',\"mode\"\: \"$1\}, \"IO\"\: \{');
    tmp = tmp.replace(/\s/gm,'');
    dataB.push(tmp);
    i ++;
    i ++;
  };
  return cb(dataB);
}


function parseDataVersion(err, data, cb) {
  if (err) throw err;
  var drbdVersion = "";
  drbdVersion = "\{\"drbd_version\"\:\"";
  drbdVersion = drbdVersion.concat(data.substr(9,5).concat("\"\}"));
  cb(drbdVersion);
}
