"use strict";
var fs = require('fs');
var async = require('async');

function parseData(err, pdrbd, cb) {
  if (err) {
    cb(err);
  }
  pdrbd = pdrbd.replace(/(\[\>\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\.\]).+\n/, '');
  pdrbd = pdrbd.replace(/finish.+\n/, '');
  pdrbd = pdrbd.replace(/\d\% sector.+\n/, '');
  pdrbd = pdrbd.replace(/(\.+\n){1,2}/, '');
  pdrbd = pdrbd.replace(/(\r\n|\n|\r)/gm, ' ');
  pdrbd = pdrbd.replace(/\s+/g, ' ');
  var pdrbdsplit = pdrbd.split(/(\d+:\scs:)/), pdrbdarray = [], i = 1, pregex;
  while (i < pdrbdsplit.length) {
    pregex = pdrbdsplit[i].concat(pdrbdsplit[i + 1]);
    pregex = pregex.replace(/([rs])([a\-])([p\-])([u\-])([abdn\-])([s\-])/, 'io_suspension: $1, serial_resynchronization: $2, peer_initiated_sync: $3, locally_initiated_sync: $4, locally_blocked_io: $5, activity_log_update_suspension: $6');
    pregex = pregex.replace(/-/gm, 'null');
    pregex = pregex.replace(/(\b)/gm, '\"');
    pregex = pregex.replace(/(\"\/\")/gm, '\/');
    pregex = pregex.replace(/\"cs/, '{ \"state\": {\"cs');
    pregex = pregex.replace(/\s\"ro/, ', \"ro');
    pregex = pregex.replace(/\s\"ds/, ', \"ds');
    pregex = pregex.replace(/\"ns/, '}, \"performance\": {\"ns');
    pregex = pregex.replace(/\s\"nr/, ', \"nr');
    pregex = pregex.replace(/\s\"dw/, ', \"dw');
    pregex = pregex.replace(/\s\"dr/, ', \"dr');
    pregex = pregex.replace(/\s\"al/, ', \"al');
    pregex = pregex.replace(/\s\"bm/, ', \"bm');
    pregex = pregex.replace(/\s\"lo\"/, ', \"lo\"');
    pregex = pregex.replace(/\s\"pe\"/, ', \"pe\"');
    pregex = pregex.replace(/\s\"ua/, ', \"ua');
    pregex = pregex.replace(/\s\"ap/, ', \"ap');
    pregex = pregex.replace(/\s\"ep/, ', \"ep');
    pregex = pregex.replace(/\s\"wo/, ', \"wo');
    pregex = pregex.replace(/\s\"oos\"/, ', \"oos\"');
    pregex = pregex.replace(/\"resync\"\:/, '}, \"resync\": {');
    pregex = pregex.replace(/\s\"hits/gm, ', \"hits');
    pregex = pregex.replace(/\s\"misses\"/gm, ', \"misses\"');
    pregex = pregex.replace(/\s\"starving/gm, ', \"starving');
    pregex = pregex.replace(/\s\"locked/gm, ', \"locked');
    pregex = pregex.replace(/\s\"changed/gm, ', \"changed');
    pregex = pregex.replace(/\"act\_log\"\:/, '}, \"act_log\": {');
    pregex = pregex.replace(/^\"/, '\"drbd');
    pregex = pregex.replace(/$/, '}}');
    pregex = pregex.replace(/\"([ABC]\")/, ',\"mode\": \"$1}, \"IO\": {');
    pregex = pregex.replace(/\s/gm, '');
    pdrbdarray.push(pregex);
    i = i + 2;
  }
  return cb(null, pdrbdarray.toString());
}

function parseDataVersion(err, pdrbd, cb) {
  if (err) {
    cb(err);
  }
  var drbdVersion = "";
  drbdVersion = "{\"version\":\"";
  drbdVersion = drbdVersion.concat(pdrbd.substr(9, 5).concat("\"}"));
  cb(null, drbdVersion);
}

function readData(callback) {
  var pdrbd = "";
  fs.readFile('/proc/drbd', 'utf8', function (err, pdrbd) {
    if (err) {
      throw err;
    }
    async.parallel([
      function (cb) {parseDataVersion(err, pdrbd, cb);
        },
      function (cb) {parseData(err, pdrbd, cb);
        }
    ],
      function (err, results) {
        if (err) {
          callback(err);
        }
        callback(JSON.parse("{\"drbdinfo\":".concat(results).concat("}")));
      }
      );
  });
}

exports.doit = function (callback) {
  readData(callback);
};
